version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15
    container_name: hotel_postgres
    environment:
      POSTGRES_USER: hotel_user
      POSTGRES_PASSWORD: hotel_password
      POSTGRES_DB: hotel_reservations
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - hotel_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hotel_user -d hotel_reservations"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para caché y sesiones
  redis:
    image: redis:7-alpine
    container_name: hotel_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hotel_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Servicio de Autenticación
  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
    container_name: hotel_auth_service
    environment:
      - DATABASE_URL=postgresql://hotel_user:hotel_password@postgres:5432/hotel_reservations
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-super-secret-key-change-this-in-production
      - LOG_LEVEL=INFO
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hotel_network
    volumes:
      - ./shared:/app/shared
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Servicio de Inventario
  inventory-service:
    build:
      context: ./backend/inventory-service
      dockerfile: Dockerfile
    container_name: hotel_inventory_service
    environment:
      - DATABASE_URL=postgresql://hotel_user:hotel_password@postgres:5432/hotel_reservations
      - REDIS_URL=redis://redis:6379/1
      - AUTH_SERVICE_URL=http://auth-service:8001
      - LOG_LEVEL=INFO
    ports:
      - "8003:8003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - hotel_network
    volumes:
      - ./shared:/app/shared
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Servicio de Reservas
  booking-service:
    build:
      context: ./backend/booking-service
      dockerfile: Dockerfile
    container_name: hotel_booking_service
    environment:
      - DATABASE_URL=postgresql://hotel_user:hotel_password@postgres:5432/hotel_reservations
      - REDIS_URL=redis://redis:6379/2
      - AUTH_SERVICE_URL=http://auth-service:8001
      - INVENTORY_SERVICE_URL=http://inventory-service:8003
      - NOTIFICATION_SERVICE_URL=http://notification-service:8005
      - LOG_LEVEL=INFO
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      inventory-service:
        condition: service_healthy
    networks:
      - hotel_network
    volumes:
      - ./shared:/app/shared
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Servicio de Pagos
  payment-service:
    build:
      context: ./backend/payment-service
      dockerfile: Dockerfile
    container_name: hotel_payment_service
    environment:
      - DATABASE_URL=postgresql://hotel_user:hotel_password@postgres:5432/hotel_reservations
      - REDIS_URL=redis://redis:6379/3
      - AUTH_SERVICE_URL=http://auth-service:8001
      - BOOKING_SERVICE_URL=http://booking-service:8002
      - NOTIFICATION_SERVICE_URL=http://notification-service:8005
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLIC_KEY=${STRIPE_PUBLIC_KEY}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
      - LOG_LEVEL=INFO
    ports:
      - "8004:8004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      booking-service:
        condition: service_healthy
    networks:
      - hotel_network
    volumes:
      - ./shared:/app/shared
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Servicio de Notificaciones
  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile
    container_name: hotel_notification_service
    environment:
      - DATABASE_URL=postgresql://hotel_user:hotel_password@postgres:5432/hotel_reservations
      - REDIS_URL=redis://redis:6379/4
      - AUTH_SERVICE_URL=http://auth-service:8001
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      - LOG_LEVEL=INFO
    ports:
      - "8005:8005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - hotel_network
    volumes:
      - ./shared:/app/shared
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: hotel_api_gateway
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8001
      - BOOKING_SERVICE_URL=http://booking-service:8002
      - INVENTORY_SERVICE_URL=http://inventory-service:8003
      - PAYMENT_SERVICE_URL=http://payment-service:8004
      - NOTIFICATION_SERVICE_URL=http://notification-service:8005
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    depends_on:
      auth-service:
        condition: service_healthy
      booking-service:
        condition: service_healthy
      inventory-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    networks:
      - hotel_network
    volumes:
      - ./shared:/app/shared
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Streamlit
  frontend:
    build:
      context: ./frontend/web-app
      dockerfile: Dockerfile
    container_name: hotel_frontend
    environment:
      - API_BASE_URL=http://api-gateway:8000
    ports:
      - "8501:8501"
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - hotel_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx como Load Balancer (opcional)
  nginx:
    image: nginx:alpine
    container_name: hotel_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
      - frontend
    networks:
      - hotel_network
    restart: unless-stopped

  # Prometheus para monitoreo (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: hotel_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - hotel_network
    restart: unless-stopped

  # Grafana para visualización (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: hotel_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - hotel_network
    restart: unless-stopped

networks:
  hotel_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
